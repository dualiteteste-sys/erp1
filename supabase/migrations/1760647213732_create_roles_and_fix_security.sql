-- ============================================================================
-- 1. CRIAÇÃO DAS TABELAS DE PAPÉIS E PERMISSÕES
-- ============================================================================

-- Tabela de Papéis (Roles)
CREATE TABLE IF NOT EXISTS public.papeis (
    id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
    empresa_id uuid NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
    nome text NOT NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    updated_at timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT papeis_empresa_id_nome_key UNIQUE (empresa_id, nome)
);
ALTER TABLE public.papeis ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE public.papeis IS 'Armazena os papéis (roles) de permissão para cada empresa.';

-- Tabela de junção para permissões de cada papel
CREATE TABLE IF NOT EXISTS public.papel_permissoes (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    papel_id uuid NOT NULL REFERENCES public.papeis(id) ON DELETE CASCADE,
    permissao_id text NOT NULL, -- Ex: 'clientes.ler', 'produtos.escrever'
    created_at timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT papel_permissoes_papel_id_permissao_id_key UNIQUE (papel_id, permissao_id)
);
ALTER TABLE public.papel_permissoes ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE public.papel_permissoes IS 'Associa permissões específicas a cada papel.';

-- Tabela de junção para associar usuários a empresas e papéis
CREATE TABLE IF NOT EXISTS public.empresa_usuarios (
    empresa_id uuid NOT NULL REFERENCES public.empresas(id) ON DELETE CASCADE,
    user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    papel_id uuid REFERENCES public.papeis(id) ON DELETE SET NULL,
    created_at timestamptz DEFAULT now() NOT NULL,
    PRIMARY KEY (empresa_id, user_id)
);
ALTER TABLE public.empresa_usuarios ENABLE ROW LEVEL SECURITY;
COMMENT ON TABLE public.empresa_usuarios IS 'Associa usuários a empresas e define seu papel dentro da empresa.';

-- ============================================================================
-- 2. RECRIAR FUNÇÕES E POLÍTICAS (FIX DA MIGRAÇÃO ANTERIOR)
-- ============================================================================

-- Remove a função e todas as políticas dependentes dela
DROP FUNCTION IF EXISTS public.is_member_of_empresa(uuid) CASCADE;

-- Recria a função de verificação de membro com o search_path seguro
CREATE OR REPLACE FUNCTION public.is_member_of_empresa(p_empresa_id uuid)
RETURNS boolean
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  SET search_path = 'public', 'auth';
  RETURN EXISTS (
    SELECT 1
    FROM empresa_usuarios
    WHERE empresa_id = p_empresa_id AND user_id = auth.uid()
  );
END;
$$;

-- Recria as políticas de segurança que foram removidas pelo CASCADE

-- Política para a tabela 'empresas'
CREATE POLICY "Allow individual read access" ON public.empresas FOR SELECT USING (is_member_of_empresa(id));
CREATE POLICY "Allow individual update access" ON public.empresas FOR UPDATE USING (is_member_of_empresa(id));
CREATE POLICY "Allow individual delete access" ON public.empresas FOR DELETE USING (is_member_of_empresa(id));

-- Políticas para as novas tabelas
CREATE POLICY "Members can manage roles" ON public.papeis FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Members can manage role permissions" ON public.papel_permissoes FOR ALL USING (
    is_member_of_empresa((SELECT empresa_id FROM papeis WHERE id = papel_id))
);
CREATE POLICY "Members can manage user associations" ON public.empresa_usuarios FOR ALL USING (is_member_of_empresa(empresa_id));

-- Recriar políticas para tabelas existentes
CREATE POLICY "Allow members to manage their own company data" ON public.clientes_fornecedores FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Allow members to manage their own company data" ON public.clientes_contatos FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Allow members to manage their own company data" ON public.clientes_anexos FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Allow members to manage their own company data" ON public.produtos FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Allow members to manage their own company data" ON public.produto_imagens FOR ALL USING (is_member_of_empresa((SELECT empresa_id FROM produtos WHERE id = produto_id)));
CREATE POLICY "Allow members to manage their own company data" ON public.produto_atributos FOR ALL USING (is_member_of_empresa((SELECT empresa_id FROM produtos WHERE id = produto_id)));
CREATE POLICY "Allow members to manage their own company data" ON public.produto_fornecedores FOR ALL USING (is_member_of_empresa((SELECT empresa_id FROM produtos WHERE id = produto_id)));
CREATE POLICY "Allow members to manage their own company servicos" ON public.servicos FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Vendedores members can do all actions" ON public.vendedores FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Vendedores contatos members can do all actions" ON public.vendedores_contatos FOR ALL USING (is_member_of_empresa((SELECT empresa_id FROM vendedores WHERE id = vendedor_id)));
CREATE POLICY "Embalagens members can do all actions" ON public.embalagens FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "CRM Oportunidades members can do all actions" ON public.crm_oportunidades FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Permite acesso total para membros da empresa" ON public.pedidos_vendas FOR ALL USING (is_member_of_empresa(empresa_id));
CREATE POLICY "Permite acesso total para membros da empresa" ON public.pedidos_vendas_itens FOR ALL USING (is_member_of_empresa((SELECT empresa_id FROM pedidos_vendas WHERE id = pedido_venda_id)));

-- ============================================================================
-- 3. GARANTIR QUE TODAS AS OUTRAS FUNÇÕES TENHAM O SEARCH_PATH SEGURO
-- ============================================================================
DO $$
DECLARE
    func_rec record;
    func_def text;
BEGIN
    FOR func_rec IN
        SELECT
            p.proname AS function_name,
            pg_get_functiondef(p.oid) AS function_definition
        FROM
            pg_proc p
            JOIN pg_namespace ns ON p.pronamespace = ns.oid
        WHERE
            ns.nspname = 'public' -- Apenas funções no schema public
            AND p.prokind = 'f' -- Apenas funções normais
            AND pg_catalog.pg_get_userbyid(p.proowner) NOT IN ('supabase_admin', 'postgres')
            AND p.proname != 'is_member_of_empresa' -- Já corrigimos esta
    LOOP
        func_def := func_rec.function_definition;

        -- Verifica se a função já tem SET search_path
        IF func_def NOT LIKE '%SET search_path%' THEN
            -- Adiciona 'SET search_path' após a declaração de linguagem
            func_def := regexp_replace(
                func_def,
                '(LANGUAGE \w+\s*(SECURITY (DEFINER|INVOKER))?\s*AS \$\$)',
                '\1' || E'\nBEGIN\n  SET search_path = \'public\', \'auth\';',
                'i'
            );

            -- Se a função não tiver um BEGIN/END, envolve o corpo
            IF func_def NOT LIKE '%BEGIN%' THEN
                 func_def := regexp_replace(
                    func_def,
                    '(AS \$\$)(.*)(\$\$)',
                    '\1' || E'\nBEGIN\n  SET search_path = \'public\', \'auth\';\n  RETURN \2;\nEND;\n\3',
                    'is'
                );
            END IF;

            EXECUTE func_def;
        END IF;
    END LOOP;
END;
$$;
